name: .NET SonarCloud Analysis

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    env:
      DOTNET_ROOT: C:\Program Files\dotnet
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Install SonarScanner tool
        shell: pwsh
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 10.4.1
          $Env:PATH += ";$Env:USERPROFILE\.dotnet\tools"

      - name: Find test project
        id: find_test
        shell: pwsh
        run: |
          $testProj = Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Recurse -Filter "*.Tests.csproj" | Select-Object -First 1
          if (-not $testProj) { throw "No test project found!" }
          Write-Host "Found test project: $($testProj.FullName)"
          echo "testProjPath=$($testProj.FullName)" >> $Env:GITHUB_ENV

      - name: Begin SonarCloud analysis
        shell: pwsh
        run: |
          dotnet sonarscanner begin `
            /k:"bipolare_reverse-engineering-software" `
            /o:"bipolare" `
            /d:sonar.login="$Env:SONAR_TOKEN" `
            /d:sonar.cs.opencover.reportsPaths="$Env:GITHUB_WORKSPACE\coverage\coverage.opencover.xml"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --no-restore --configuration Release

      - name: Run tests with coverage
        shell: pwsh
        run: |
          $coverageDir = "$Env:GITHUB_WORKSPACE\coverage"
          if (-not (Test-Path $coverageDir)) { New-Item -ItemType Directory -Path $coverageDir }

          dotnet test $Env:testProjPath `
            --no-build `
            --configuration Release `
            /p:CollectCoverage=true `
            /p:CoverletOutput="$coverageDir\coverage.opencover.xml" `
            /p:CoverletOutputFormat=opencover

      - name: End SonarCloud analysis
        shell: pwsh
        run: dotnet sonarscanner end /d:sonar.login="$Env:SONAR_TOKEN"
